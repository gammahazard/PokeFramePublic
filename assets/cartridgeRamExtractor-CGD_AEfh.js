function T(r){try{if(!r||r.length<100)return console.error("Invalid save state data for extraction"),null;const o=r[0];if(o!==1&&o!==2&&o!==3)return console.error(`Unsupported save state version: ${o}`),null;if(o===3){if(33024>r.length)return console.error("Invalid version 3 save state: missing cartridge RAM size"),null;const t=r[33020]|r[33021]<<8|r[33022]<<16|r[33023]<<24;return 33024+t>r.length?(console.error("Invalid version 3 save state: truncated cartridge RAM data"),null):(console.log(`Extracting ${t} bytes of cartridge RAM from version 3 fixed offset: 0x8100`),r.slice(33024,33024+t))}let n=1;n+=8,n+=4,n+=o>=2?4:1;const e=r[n]|r[n+1]<<8|r[n+2]<<16|r[n+3]<<24;if(n+=4,n+=e,o>=2){n+=127;const l=r[n];n+=1+l;const f=r[n];n+=1+f,n+=2}if(n+4>r.length)return console.error("Invalid save state: truncated before cartridge RAM"),null;const g=r[n]|r[n+1]<<8|r[n+2]<<16|r[n+3]<<24;return n+=4,n+g>r.length?(console.error("Invalid save state: truncated cartridge RAM data"),null):r.slice(n,n+g)}catch(o){return console.error("Error extracting cartridge RAM from save state:",o),null}}function _(r,o){try{if(!r||r.length<100)return console.error("Invalid save state data for replacement"),r;const n=r[0];if(n!==1&&n!==2&&n!==3)return console.error(`Unsupported save state version: ${n}`),r;if(n===3){if(33024>r.length)return console.error("Invalid version 3 save state: missing cartridge RAM size"),r;const O=r[33020]|r[33021]<<8|r[33022]<<16|r[33023]<<24,R=o.length,d=33024+O,F=33024+R+(r.length>d?r.length-d:0),i=new Uint8Array(F);return i.set(r.slice(0,33020)),i[33020]=R&255,i[33021]=R>>8&255,i[33022]=R>>16&255,i[33023]=R>>24&255,i.set(r.slice(33020,33024),33020),i.set(o,33024),r.length>d&&i.set(r.slice(d),33024+R),console.log(`V3 save state modified: original=${r.length} bytes, new=${i.length} bytes`),console.log(`Replaced cartridge RAM: original=${O} bytes, new=${R} bytes`),i}let e=1;e+=8,e+=4,e+=n>=2?4:1;const g=r[e]|r[e+1]<<8|r[e+2]<<16|r[e+3]<<24;if(e+=4,e+=g,n>=2){e+=127;const A=r[e];e+=1+A;const u=r[e];e+=1+u,e+=2}const l=e,f=r[e]|r[e+1]<<8|r[e+2]<<16|r[e+3]<<24;e+=4;const t=e,m=t+f,s=o.length,z=t+s+(r.length>m?r.length-m:0),c=new Uint8Array(z);return c.set(r.slice(0,l)),c[l]=s&255,c[l+1]=s>>8&255,c[l+2]=s>>16&255,c[l+3]=s>>24&255,c.set(o,t),r.length>m&&c.set(r.slice(m),t+s),console.log(`Save state modified: original=${r.length} bytes, new=${c.length} bytes`),console.log(`Replaced cartridge RAM: original=${f} bytes, new=${s} bytes`),c}catch(n){return console.error("Error replacing cartridge RAM in save state:",n),r}}export{T as extractCartridgeRamFromSaveState,_ as replaceCartridgeRamInSaveState};
